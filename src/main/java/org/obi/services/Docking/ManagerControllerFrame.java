/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package org.obi.services.Docking;

import java.awt.Color;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.obi.services.app.ManagerControllerThread;
import org.obi.services.app.TagsCollectorThread;
import org.obi.services.entities.machines.Machines;
import org.obi.services.util.Util;
import org.obi.services.listener.thread.SystemThreadListener;
import org.obi.services.listener.machines.MachinesEvent;
import org.obi.services.listener.thread.ManagerFrameEvent;

/**
 *
 * @author r.hendrick
 */
public class ManagerControllerFrame extends javax.swing.JPanel 
        implements SystemThreadListener, MachinesEvent, ManagerFrameEvent {

    private DefaultTableModel modelMachines;
//    private DefaultTableModel modelTagsOfMachines;

    /**
     * Creates new form ManagerControllerFrame
     */
    public ManagerControllerFrame() {
        initComponents();
        modelMachines = (DefaultTableModel) tableMachines.getModel();
//        modelTagsOfMachines = (DefaultTableModel) tableTagsCollector.getModel();
        Util.out(Util.errLine() + ManagerControllerFrame.class.getSimpleName()
                + " : constructor >> create successfully !");
        updateThreads();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        managerControlerPanel = new javax.swing.JPanel();
        managerPanel = new javax.swing.JPanel();
        labFieldMainProcessingState = new javax.swing.JLabel();
        labInMainProcessingState = new javax.swing.JLabel();
        labFieldSubProcessingState = new javax.swing.JLabel();
        labSubProcessingState = new javax.swing.JLabel();
        separator01 = new javax.swing.JSeparator();
        labFieldAvailableMachines = new javax.swing.JLabel();
        labAvailableMachinesCount = new javax.swing.JLabel();
        separator_02 = new javax.swing.JSeparator();
        labFieldProcessCycleTime = new javax.swing.JLabel();
        labFieldSubProcessCycleTime = new javax.swing.JLabel();
        labProcessCycleTime = new javax.swing.JLabel();
        labSubProcessCycleTime = new javax.swing.JLabel();
        labFieldProcessCycleTimeUnit = new javax.swing.JLabel();
        labFieldSubProcessCycleTimeUnit = new javax.swing.JLabel();
        labFieldThreadCounterTotalVM = new javax.swing.JLabel();
        labThreadCounterTotalVM = new javax.swing.JLabel();
        labFieldThreadCounterExecuting = new javax.swing.JLabel();
        labThreadCounterExecuting = new javax.swing.JLabel();
        btnThreadUpdate = new javax.swing.JButton();
        scrollTableMachines = new javax.swing.JScrollPane();
        tableMachines = new javax.swing.JTable();

        managerControlerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Manager controller"));
        managerControlerPanel.setPreferredSize(new java.awt.Dimension(698, 150000));
        managerControlerPanel.setLayout(new javax.swing.BoxLayout(managerControlerPanel, javax.swing.BoxLayout.Y_AXIS));

        managerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        managerPanel.setMaximumSize(new java.awt.Dimension(32767, 128));
        managerPanel.setPreferredSize(new java.awt.Dimension(688, 128));

        labFieldMainProcessingState.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labFieldMainProcessingState.setText("Main processing state");

        labInMainProcessingState.setBackground(new java.awt.Color(255, 0, 0));
        labInMainProcessingState.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labInMainProcessingState.setText("OFF");
        labInMainProcessingState.setMaximumSize(new java.awt.Dimension(16, 16));
        labInMainProcessingState.setMinimumSize(new java.awt.Dimension(32, 32));
        labInMainProcessingState.setOpaque(true);
        labInMainProcessingState.setPreferredSize(new java.awt.Dimension(16, 16));

        labFieldSubProcessingState.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labFieldSubProcessingState.setText("Sub processing state");

        labSubProcessingState.setBackground(new java.awt.Color(255, 0, 0));
        labSubProcessingState.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labSubProcessingState.setText("OFF");
        labSubProcessingState.setMaximumSize(new java.awt.Dimension(16, 16));
        labSubProcessingState.setMinimumSize(new java.awt.Dimension(32, 32));
        labSubProcessingState.setOpaque(true);
        labSubProcessingState.setPreferredSize(new java.awt.Dimension(16, 16));

        separator01.setOrientation(javax.swing.SwingConstants.VERTICAL);

        labFieldAvailableMachines.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labFieldAvailableMachines.setText("Available Machines");

        labAvailableMachinesCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labAvailableMachinesCount.setText("####");
        labAvailableMachinesCount.setMaximumSize(new java.awt.Dimension(16, 16));
        labAvailableMachinesCount.setMinimumSize(new java.awt.Dimension(32, 32));
        labAvailableMachinesCount.setOpaque(true);
        labAvailableMachinesCount.setPreferredSize(new java.awt.Dimension(16, 16));

        separator_02.setOrientation(javax.swing.SwingConstants.VERTICAL);

        labFieldProcessCycleTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labFieldProcessCycleTime.setText("Process Cycle Time");

        labFieldSubProcessCycleTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labFieldSubProcessCycleTime.setText("Sub Process Cycle Time");

        labProcessCycleTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labProcessCycleTime.setText("######");
        labProcessCycleTime.setMaximumSize(new java.awt.Dimension(16, 16));
        labProcessCycleTime.setMinimumSize(new java.awt.Dimension(32, 32));
        labProcessCycleTime.setOpaque(true);
        labProcessCycleTime.setPreferredSize(new java.awt.Dimension(16, 16));

        labSubProcessCycleTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labSubProcessCycleTime.setText("######");
        labSubProcessCycleTime.setMaximumSize(new java.awt.Dimension(16, 16));
        labSubProcessCycleTime.setMinimumSize(new java.awt.Dimension(32, 32));
        labSubProcessCycleTime.setOpaque(true);
        labSubProcessCycleTime.setPreferredSize(new java.awt.Dimension(16, 16));

        labFieldProcessCycleTimeUnit.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labFieldProcessCycleTimeUnit.setText("ms");

        labFieldSubProcessCycleTimeUnit.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labFieldSubProcessCycleTimeUnit.setText("ms");

        labFieldThreadCounterTotalVM.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labFieldThreadCounterTotalVM.setText("Total Thread VM");

        labThreadCounterTotalVM.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labThreadCounterTotalVM.setText("####");
        labThreadCounterTotalVM.setMaximumSize(new java.awt.Dimension(16, 16));
        labThreadCounterTotalVM.setMinimumSize(new java.awt.Dimension(32, 32));
        labThreadCounterTotalVM.setOpaque(true);
        labThreadCounterTotalVM.setPreferredSize(new java.awt.Dimension(16, 16));

        labFieldThreadCounterExecuting.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labFieldThreadCounterExecuting.setText("Total executed thread");

        labThreadCounterExecuting.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labThreadCounterExecuting.setText("####");
        labThreadCounterExecuting.setMaximumSize(new java.awt.Dimension(16, 16));
        labThreadCounterExecuting.setMinimumSize(new java.awt.Dimension(32, 32));
        labThreadCounterExecuting.setOpaque(true);
        labThreadCounterExecuting.setPreferredSize(new java.awt.Dimension(16, 16));

        btnThreadUpdate.setText("update");
        btnThreadUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThreadUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout managerPanelLayout = new javax.swing.GroupLayout(managerPanel);
        managerPanel.setLayout(managerPanelLayout);
        managerPanelLayout.setHorizontalGroup(
            managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerPanelLayout.createSequentialGroup()
                .addGroup(managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managerPanelLayout.createSequentialGroup()
                        .addComponent(labFieldMainProcessingState, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labInMainProcessingState, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(managerPanelLayout.createSequentialGroup()
                        .addComponent(labFieldSubProcessingState, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labSubProcessingState, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator_02, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labFieldAvailableMachines, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labAvailableMachinesCount, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator01, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(managerPanelLayout.createSequentialGroup()
                        .addComponent(labFieldSubProcessCycleTime, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labSubProcessCycleTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(managerPanelLayout.createSequentialGroup()
                        .addComponent(labFieldProcessCycleTime, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labProcessCycleTime, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(managerPanelLayout.createSequentialGroup()
                        .addComponent(labFieldProcessCycleTimeUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnThreadUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labFieldThreadCounterTotalVM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(managerPanelLayout.createSequentialGroup()
                        .addComponent(labFieldSubProcessCycleTimeUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labFieldThreadCounterExecuting, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labThreadCounterExecuting, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labThreadCounterTotalVM, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 78, Short.MAX_VALUE))
        );
        managerPanelLayout.setVerticalGroup(
            managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(separator_02)
                    .addComponent(separator01)
                    .addGroup(managerPanelLayout.createSequentialGroup()
                        .addGroup(managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(managerPanelLayout.createSequentialGroup()
                                .addGroup(managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(labFieldProcessCycleTime)
                                        .addComponent(labProcessCycleTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labFieldProcessCycleTimeUnit))
                                    .addGroup(managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnThreadUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labFieldThreadCounterTotalVM)
                                        .addComponent(labThreadCounterTotalVM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(9, 9, 9)
                                .addGroup(managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labFieldSubProcessCycleTime)
                                    .addComponent(labSubProcessCycleTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labFieldSubProcessCycleTimeUnit)
                                    .addComponent(labFieldThreadCounterExecuting)
                                    .addComponent(labThreadCounterExecuting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(managerPanelLayout.createSequentialGroup()
                                .addGroup(managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labFieldMainProcessingState)
                                    .addComponent(labInMainProcessingState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labFieldSubProcessingState)
                                    .addComponent(labSubProcessingState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labFieldAvailableMachines)
                                .addComponent(labAvailableMachinesCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 1, Short.MAX_VALUE)))
                .addContainerGap())
        );

        managerControlerPanel.add(managerPanel);

        scrollTableMachines.setPreferredSize(new java.awt.Dimension(452, 15000));

        tableMachines.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°", "ID", "Machine", "Link", "Connected", "Process State", "Main Cyle  [ms]", "Sub Process", "Sub Cyle [ms]", "Message", "Tags", "T_Conn", "T Tags Find", "T Tags Read"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Long.class, java.lang.Boolean.class, java.lang.Long.class, java.lang.String.class, java.lang.Integer.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollTableMachines.setViewportView(tableMachines);
        if (tableMachines.getColumnModel().getColumnCount() > 0) {
            tableMachines.getColumnModel().getColumn(0).setPreferredWidth(42);
            tableMachines.getColumnModel().getColumn(0).setMaxWidth(64);
            tableMachines.getColumnModel().getColumn(1).setPreferredWidth(42);
            tableMachines.getColumnModel().getColumn(1).setMaxWidth(64);
            tableMachines.getColumnModel().getColumn(4).setPreferredWidth(32);
            tableMachines.getColumnModel().getColumn(4).setMaxWidth(128);
            tableMachines.getColumnModel().getColumn(5).setPreferredWidth(32);
            tableMachines.getColumnModel().getColumn(5).setMaxWidth(128);
            tableMachines.getColumnModel().getColumn(6).setPreferredWidth(42);
            tableMachines.getColumnModel().getColumn(6).setMaxWidth(128);
            tableMachines.getColumnModel().getColumn(7).setPreferredWidth(32);
            tableMachines.getColumnModel().getColumn(7).setMaxWidth(128);
            tableMachines.getColumnModel().getColumn(8).setPreferredWidth(42);
            tableMachines.getColumnModel().getColumn(8).setMaxWidth(128);
            tableMachines.getColumnModel().getColumn(10).setPreferredWidth(64);
            tableMachines.getColumnModel().getColumn(10).setMaxWidth(128);
            tableMachines.getColumnModel().getColumn(11).setPreferredWidth(64);
            tableMachines.getColumnModel().getColumn(11).setMaxWidth(128);
            tableMachines.getColumnModel().getColumn(12).setPreferredWidth(64);
            tableMachines.getColumnModel().getColumn(12).setMaxWidth(128);
            tableMachines.getColumnModel().getColumn(13).setPreferredWidth(64);
            tableMachines.getColumnModel().getColumn(13).setMaxWidth(128);
        }

        managerControlerPanel.add(scrollTableMachines);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(managerControlerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 866, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(managerControlerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public void updateThreads(){
        countThreadsVM();
        countThreadsExecuting();
    }
    private void btnThreadUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThreadUpdateActionPerformed
        // TODO add your handling code here:
        updateThreads();
    }//GEN-LAST:event_btnThreadUpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnThreadUpdate;
    private javax.swing.JLabel labAvailableMachinesCount;
    private javax.swing.JLabel labFieldAvailableMachines;
    private javax.swing.JLabel labFieldMainProcessingState;
    private javax.swing.JLabel labFieldProcessCycleTime;
    private javax.swing.JLabel labFieldProcessCycleTimeUnit;
    private javax.swing.JLabel labFieldSubProcessCycleTime;
    private javax.swing.JLabel labFieldSubProcessCycleTimeUnit;
    private javax.swing.JLabel labFieldSubProcessingState;
    private javax.swing.JLabel labFieldThreadCounterExecuting;
    private javax.swing.JLabel labFieldThreadCounterTotalVM;
    private javax.swing.JLabel labInMainProcessingState;
    private javax.swing.JLabel labProcessCycleTime;
    private javax.swing.JLabel labSubProcessCycleTime;
    private javax.swing.JLabel labSubProcessingState;
    private javax.swing.JLabel labThreadCounterExecuting;
    private javax.swing.JLabel labThreadCounterTotalVM;
    private javax.swing.JPanel managerControlerPanel;
    private javax.swing.JPanel managerPanel;
    private javax.swing.JScrollPane scrollTableMachines;
    private javax.swing.JSeparator separator01;
    private javax.swing.JSeparator separator_02;
    private javax.swing.JTable tableMachines;
    // End of variables declaration//GEN-END:variables

    public static final int N = 0;
    public static final int ID = 1;
    public static final int MACHINE = 2;
    public static final int LINK = 3;
    public static final int CONNECTED = 4;
    public static final int PROCESSING = 5;
    public static final int PROCESSINGCYCLE = 6;
    public static final int SUBPROCESSING = 7;
    public static final int SUBPROCESSINGCYLE = 8;
    public static final int MESSAGE = 9;
    public static final int COLLECTION_COUNT = 10;

    public static final int T_TOCONNECT = 11;
    public static final int T_TAGS_FIND = 12;
    public static final int T_TAGS_READING = 13;

    @Override
    public void onProcessingThread(Thread thread) {
        // Check which thread is concern
        if (thread instanceof ManagerControllerThread) {
            labInMainProcessingState.setBackground(Color.GREEN);
            labInMainProcessingState.setText("ON");
            labInMainProcessingState.setForeground(Color.BLACK);
        } else if (thread instanceof TagsCollectorThread) {
            // Recovery Thread
            TagsCollectorThread tags = (TagsCollectorThread) thread;
            // Get back machine
            Machines machine = tags.getMachine();

            // Look after model to change update state
            DefaultTableModel m = (DefaultTableModel) tableMachines.getModel();
            for (int row = 0; row < m.getRowCount(); row++) {
                Util.out(Util.errLine() + getClass().getSimpleName()
                        + " onProcessingThread with machine id : " + machine.getId() + " >> " + machine.getName());
                if (m.getValueAt(row, 1) == machine.getId()) {
                    //m.setValueAt(true, row, 5);
                    tableMachines.setValueAt(true, row, PROCESSING);
                    Util.out(Util.errLine() + getClass().getSimpleName()
                            + " onProcessingThread id found >> " + machine.getId());
                }
            }
        }
    }

    @Override
    public void onProcessingSubThread(Thread thread) {
        // Check which Thread is Concern
        if (thread instanceof ManagerControllerThread) {
            labSubProcessingState.setBackground(Color.GREEN);
            labSubProcessingState.setText("ON");
            labSubProcessingState.setForeground(Color.BLACK);
        } else if (thread instanceof TagsCollectorThread) {
            // Recovery Thread
            TagsCollectorThread tags = (TagsCollectorThread) thread;
            // Get back machine
            Machines machine = tags.getMachine();

            // Look after model to change update state
            DefaultTableModel m = (DefaultTableModel) tableMachines.getModel();
            for (int row = 0; row < m.getRowCount(); row++) {
                if (m.getValueAt(row, 1) == machine.getId()) {
                    //m.setValueAt(true, row, 5);
                    tableMachines.setValueAt(true, row, SUBPROCESSING);
                }
            }
        }
    }

    /**
     * on Sub Processing Stop Thread
     *
     * Will update color and state for manager otherwise child state in table
     *
     * @param thread where event is provided
     */
    @Override
    public void onProcessingSubStopThread(Thread thread) {
        // Check which Thread is Concern
        if (thread instanceof ManagerControllerThread) {
            labSubProcessingState.setBackground(Color.RED);
            labSubProcessingState.setText("OFF");
            labSubProcessingState.setForeground(Color.YELLOW);
        } else if (thread instanceof TagsCollectorThread) {
            // Recovery Thread
            TagsCollectorThread tags = (TagsCollectorThread) thread;
            // Get back machine
            Machines machine = tags.getMachine();

            // Look after model to change update state
            DefaultTableModel m = (DefaultTableModel) tableMachines.getModel();
            for (int row = 0; row < m.getRowCount(); row++) {
                if (m.getValueAt(row, 1) == machine.getId()) {
                    //m.setValueAt(true, row, 5);
                    tableMachines.setValueAt(false, row, SUBPROCESSING);
                }
            }
        }
    }

    /**
     * on Processing Stop Thread
     *
     * Will update color and state for manager otherwise child state in table
     *
     * @param thread where event is provided
     */
    @Override
    public void onProcessingStopThread(Thread thread) {
        // Check which thread is concern
        if (thread instanceof ManagerControllerThread) {
            labInMainProcessingState.setBackground(Color.RED);
            labInMainProcessingState.setText("OFF");
            labInMainProcessingState.setForeground(Color.YELLOW);
        } else if (thread instanceof TagsCollectorThread) {
            // Recovery Thread
            TagsCollectorThread tags = (TagsCollectorThread) thread;
            // Get back machine
            Machines machine = tags.getMachine();

            // Look after model to change update state
            DefaultTableModel m = (DefaultTableModel) tableMachines.getModel();
            for (int row = 0; row < m.getRowCount(); row++) {
                if (m.getValueAt(row, 1) == machine.getId()) {
                    //m.setValueAt(true, row, 5);
                    tableMachines.setValueAt(false, row, PROCESSING);
                }
            }
        }
    }

    /**
     * On Processing Cycle Time
     *
     * Update information in page
     *
     * @param thread the value of thread
     * @param ms the value of ms
     */
    @Override
    public void onProcessingCycleTime(Thread thread, Long ms) {
        // Check which Thread is Concern
        if (thread instanceof ManagerControllerThread) {
            labProcessCycleTime.setText(String.valueOf(ms));
        } else if (thread instanceof TagsCollectorThread) {
            // Recovery Thread
            TagsCollectorThread tags = (TagsCollectorThread) thread;
            // Get back machine
            Machines machine = tags.getMachine();

            // Look after model to change update state
            DefaultTableModel m = (DefaultTableModel) tableMachines.getModel();
            for (int row = 0; row < m.getRowCount(); row++) {
                if (m.getValueAt(row, 1) == machine.getId()) {
                    //m.setValueAt(true, row, 5);
                    tableMachines.setValueAt(ms, row, PROCESSINGCYCLE);
                }
            }
        }
    }

    /**
     * On Processing Cycle Time
     *
     * @param thread the value of thread
     * @param ms the value of ms
     */
    @Override
    public void onProcessingSubCycleTime(Thread thread, Long ms) {
        // Check which Thread is Concern
        if (thread instanceof ManagerControllerThread) {
            labSubProcessCycleTime.setText(String.valueOf(ms));
        } else if (thread instanceof TagsCollectorThread) {
            // Recovery Thread
            TagsCollectorThread tags = (TagsCollectorThread) thread;
            // Get back machine
            Machines machine = tags.getMachine();

            // Look after model to change update state
            DefaultTableModel m = (DefaultTableModel) tableMachines.getModel();
            for (int row = 0; row < m.getRowCount(); row++) {
                if (m.getValueAt(row, 1) == machine.getId()) {
                    //m.setValueAt(true, row, 5);
                    tableMachines.setValueAt(ms, row, SUBPROCESSINGCYLE);
                }
            }
        }
    }

    @Override
    public void onErrorCollection(Thread thread, String message) {
        // Check which Thread is Concern
        if (thread instanceof ManagerControllerThread) {

        } else if (thread instanceof TagsCollectorThread) {
            // Recovery Thread
            TagsCollectorThread tags = (TagsCollectorThread) thread;
            // Get back machine
            Machines machine = tags.getMachine();

            // Look after model to change update state
            DefaultTableModel m = (DefaultTableModel) tableMachines.getModel();
            for (int row = 0; row < m.getRowCount(); row++) {
                if (m.getValueAt(row, 1) == machine.getId()) {
                    //m.setValueAt(true, row, 5);
                    tableMachines.setValueAt(message, row, MESSAGE);
                }
            }
        }
    }

    @Override
    public void countEvent(int count) {
        labAvailableMachinesCount.setText(String.valueOf(count));
    }

    @Override
    public void addEvent(Machines machine) {
        TableModel m = tableMachines.getModel();
        Object[] rowData = {
            modelMachines.getRowCount() + 1,
            machine.getId(),
            machine.getName(),
            machine.getAddress(),
            false,
            false,
            0,
            false,
            0,
            "Aucun",
            0, // Tags
            0, // T to connect
            0, // T to find tags of machine
            0 // T to read tags 
        };
        modelMachines.addRow(rowData);
        tableMachines.setModel(m);

    }

    @Override
    public void removeEvent(Machines machine) {
//        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * Supprime l'ensemble des lignes du modèle de la table machine
     */
    void clearMachineTable() {
        DefaultTableModel m = (DefaultTableModel) tableMachines.getModel();
        for (int i = m.getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) tableMachines.getModel()).removeRow(i);
        }
    }

    @Override
    public void onSubProcessActivityState(Thread thread, Boolean activity) {
        // Check which Thread is Concern
        if (thread instanceof ManagerControllerThread) {
        } else if (thread instanceof TagsCollectorThread) {
            // Recovery Thread
            TagsCollectorThread tags = (TagsCollectorThread) thread;
            // Get back machine
            Machines machine = tags.getMachine();

            // Look after model to change update state
            DefaultTableModel m = (DefaultTableModel) tableMachines.getModel();
            for (int row = 0; row < m.getRowCount(); row++) {
                if (m.getValueAt(row, 1) == machine.getId()) {
                    //m.setValueAt(true, row, 5);
                    tableMachines.setValueAt(activity, row, CONNECTED);
                }
            }
        }

    }

    @Override
    public void onCollectionCount(Thread thread, int count) {
        // Check which Thread is Concern
        if (thread instanceof ManagerControllerThread) {

        } else if (thread instanceof TagsCollectorThread) {
            // Recovery Thread
            TagsCollectorThread tags = (TagsCollectorThread) thread;
            // Get back machine
            Machines machine = tags.getMachine();

            // Look after model to change update state
            DefaultTableModel m = (DefaultTableModel) tableMachines.getModel();
            for (int row = 0; row < m.getRowCount(); row++) {
                if (m.getValueAt(row, 1) == machine.getId()) {
                    //m.setValueAt(true, row, 5);
                    tableMachines.setValueAt(count, row, COLLECTION_COUNT);
                }
            }
        }

    }

    @Override
    public void onDuration(Thread thread, int type, long duration) {
        // Check which Thread is Concern
        if (thread instanceof ManagerControllerThread) {

        } else if (thread instanceof TagsCollectorThread) {
            // Recovery Thread
            TagsCollectorThread tags = (TagsCollectorThread) thread;
            // Get back machine
            Machines machine = tags.getMachine();

            // Look after model to change update state
            DefaultTableModel m = (DefaultTableModel) tableMachines.getModel();
            for (int row = 0; row < m.getRowCount(); row++) {
                if (m.getValueAt(row, 1) == machine.getId()) {
                    //m.setValueAt(true, row, 5);
                    tableMachines.setValueAt(duration, row, COLLECTION_COUNT + type);
                }
            }
        }
    }

    @Override
    public void countThreadsVM() {
//        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        int nbThreads = Thread.getAllStackTraces().keySet().size();
        labThreadCounterTotalVM.setText(String.valueOf(nbThreads));
    }

    @Override
    public void countThreadsExecuting() {
//        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        int nbRunning = 0;
        for (Thread t : Thread.getAllStackTraces().keySet()) {
            if (t.getState() == Thread.State.RUNNABLE) {
                nbRunning++;
            }
        }
        labThreadCounterExecuting.setText(String.valueOf(nbRunning));
    }

    @Override
    public void addThread(Thread thread) {
//        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void removeThread(Thread thread) {
//        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

}
